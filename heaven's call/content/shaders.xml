<shaders>
    <shader name="Timestuck">
        <parameters>
            <param name="Enabled" type="float"/>
        </parameters>
        <vertex><![CDATA[
            attribute vec3 Position;
            attribute vec4 Color;
            attribute vec2 TexCoord;
            attribute vec4 RenderData;
            attribute float Scale;
            attribute float Enabled;
            varying vec4 Color0;
            varying vec2 TexCoord0;
            varying vec4 RenderDataOut;
            varying float ScaleOut;
            varying float EnabledOut;
            uniform mat4 Transform;
            void main(void)
            {
                RenderDataOut = RenderData;
                ScaleOut = Scale;           // Passing data to fragment shader
                EnabledOut = Enabled;             // Passing data to fragment shader
                Color0 = Color;
                TexCoord0 = TexCoord;
                gl_Position = Transform * vec4(Position.xyz, 1.0);
            }
        ]]></vertex>

        <fragment><![CDATA[#version 130
            varying lowp vec4 Color0;
            varying mediump vec2 TexCoord0;
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut;
            varying lowp float EnabledOut;
            uniform sampler2D Texture0;
            void main(void)
            {
                vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
                Color.r += EnabledOut * 0.2;
                gl_FragColor = Color;
            }
        ]]></fragment>
    </shader>

    <shader name="VenusHeat">
        <parameters>
            <param name="PlayerPos" type="vec2"/>
            <param name="CenterPos" type="vec2"/>
            <param name="Time" type="float"/>
            <param name="VenusTime" type="float"/>
        </parameters>

        <vertex><![CDATA[
                attribute vec3 Position; 
                attribute vec4 Color; 
                attribute vec2 TexCoord; 
                attribute vec4 RenderData; 
                attribute float Scale;
                attribute vec2 PlayerPos;
                attribute vec2 CenterPos;
                attribute float Time;
                attribute float VenusTime;
                
                varying vec4 Color0; 
                varying vec2 TexCoord0; 
                varying vec4 RenderDataOut; 
                varying float ScaleOut;
                varying vec2 PlayerPosOut;
                varying vec2 CenterPosOut;
                varying float TimeOut;
                varying float VenusTimeOut;
                uniform mat4 Transform; 

                void main(void) 
                {
                    RenderDataOut = RenderData;
                    ScaleOut = Scale;           // Passing data to fragment shader
                    PlayerPosOut = PlayerPos;
                    CenterPosOut = CenterPos;
                    TimeOut = Time;             // Passing data to fragment shader
                    VenusTimeOut = VenusTime;             // Passing data to fragment shader
                    Color0 = Color;


                    vec2 pos = (PlayerPos / RenderData.zw) * Scale;


                    vec2 diff = TexCoord - pos;
                    float dist = diff.x*diff.x + diff.y*diff.y;

                    
                    vec2 coord = TexCoord;

                    float margin = 0.5;
                    if ( dist < margin ) {
                        float _Strength = 0.005 * (VenusTimeOut / 60.0);
                        float _Frequency = 100.0; 
                        float _Speed = 0.25;

                        float sineNoise = sin(_Frequency * TexCoord.y - Time * _Speed);
                        float offset = sineNoise * _Strength; 

                        //float t;
                        //float edge0 = 1.0 - TexCoord.y;
                        //float edge1 = 0.45;
                        //float x = 0.6;
                        //t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);
                        //offset *= t * t * (3.0 - 2.0 * t);
                        
                        coord.x += offset;
                    }

                    TexCoord0 = coord;
                    gl_Position = Transform * vec4(Position.xyz, 1.0);
                }

        ]]></vertex>

        <fragment><![CDATA[#version 130
            varying lowp vec4 Color0; 
            varying mediump vec2 TexCoord0; 
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut; 
            varying mediump vec2 PlayerPosOut;
            varying mediump vec2 CenterPosOut;
            varying lowp float TimeOut; 
            varying lowp float VenusTimeOut; 
            uniform sampler2D Texture0; 
            void main(void)
            {
                vec4 Color = Color0 * texture2D(Texture0, TexCoord0);

                vec2 pos = (PlayerPosOut / RenderDataOut.zw) * ScaleOut;

                float dist = distance(TexCoord0, pos );
                if (dist < 10.0) {
                    Color.r += (0.2 / dist/2.0) * (VenusTimeOut / 60.0);
                    Color.g += (0.1 / dist/5.0) * (VenusTimeOut / 60.0);
                }
                gl_FragColor = Color;
            }
        ]]></fragment>

    </shader>

    <shader name="PitchBlack">
        <parameters>
            <param name="Enabled" type="float"/>
        </parameters>
        <vertex><![CDATA[
            attribute vec3 Position;
            attribute vec4 Color;
            attribute vec2 TexCoord;
            attribute vec4 RenderData;
            attribute float Scale;
            attribute float Enabled;
            varying vec4 Color0;
            varying vec2 TexCoord0;
            varying vec4 RenderDataOut;
            varying float ScaleOut;
            varying float EnabledOut;
            uniform mat4 Transform;
            void main(void)
            {
                RenderDataOut = RenderData;
                ScaleOut = Scale;           // Passing data to fragment shader
                EnabledOut = Enabled;             // Passing data to fragment shader
                Color0 = Color;
                TexCoord0 = TexCoord;
                gl_Position = Transform * vec4(Position.xyz, 1.0);
            }
        ]]></vertex>

        <fragment><![CDATA[#version 130
            varying lowp vec4 Color0;
            varying mediump vec2 TexCoord0;
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut;
            varying lowp float EnabledOut;
            uniform sampler2D Texture0;
            void main(void)
            {
                vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
                Color.r -= EnabledOut * Color.r;
                Color.g -= EnabledOut * Color.g;
                Color.b -= EnabledOut * Color.b;
                gl_FragColor = Color;
            }
        ]]></fragment>
    </shader>
</shaders>